import { ConfigInterface } from './config';
export declare class Streamer {
    private customJsonSubscriptions;
    private sscJsonSubscriptions;
    private commentSubscriptions;
    private postSubscriptions;
    private transferSubscriptions;
    private config;
    private username;
    private postingKey;
    private activeKey;
    private blockNumberTimeout;
    private lastBlockNumber;
    private blockNumber;
    private transactionId;
    private refBlockNumber;
    constructor(userConfig?: Partial<ConfigInterface>);
    setConfig(config: Partial<ConfigInterface>): void;
    start(): Promise<void>;
    stop(): void;
    private getBlock;
    private loadBlock;
    processOperation(op: any, blockNumber: number, blockId: string, prevBlockId: string, trxId: string, blockTime: Date): void;
    saveStateToDisk(): Promise<void>;
    transferSteemTokens(from: string, to: string, amount: string, symbol: string, memo?: string): any;
    transferSteemEngineTokens(from: string, to: string, symbol: string, quantity: string, memo?: string): any;
    transferSteemEngineTokensMultiple(from: string, accounts: any[], symbol: string, memo?: string, amount?: string): Promise<void>;
    issueSteemEngineTokens(from: string, to: string, symbol: string, quantity: string, memo?: string): any;
    issueSteemEngineTokensMultiple(from: string, accounts: any[], symbol: string, memo?: string, amount?: string): Promise<void>;
    upvote(votePercentage: string, username: string, permlink: string): any;
    downvote(votePercentage: string, username: string, permlink: string): any;
    onComment(callback: () => void): void;
    onPost(callback: () => void): void;
    onTransfer(account: string, callback: () => void): void;
    onCustomJson(callback: () => void): void;
    onSscJson(callback: () => void): void;
    getTransactionId(): string;
    getBlockNumber(): number;
    getRefBlockNumber(): number;
}
